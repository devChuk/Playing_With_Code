Let's talk about the compiler.


source code --> compiler                                                             --> executable code
				|																	|
				|																	|
				L-->lexer-->parser-->semantic analyzer-->optimizer-->code generator


					token identifier

							syntax analyzer

									provides "meaning". Dividing

														Not all compilers have an optimizer component. Will try to substitute your code with something faster.

																	where your code turns into some semblance of your original source code and becomes 1's and 0's

For MDL, we have to take care of these steps, except the optimization step.

>>Lexer
	It LEXES. WE'RE DONE HERE.
	It's going to identify the tokens of your language.
		Examples
				#'s, keywords, acceptable variable/identifier names, parenticies (HOW DO YOU SPELL THAT)

					for, int, true, while, false

								you can't have spaces in variable names, you can't start with a number

It will go through your code and create a list of tokens. Literally a list of tokens.

>>Parser
	While the Lexer knows valid tokens, while the Parser knows the syntax (grammar) of the language. I don't know why I'm capitalizing their names.
	Takes token list and creates a syntax tree

			(int)main----------------------------------------------return-----1
					|								|
					|								|
			        =------long-----x				print---x
					 |
					 +---6
					 |
  				 	 |
					 5										I tried.

>>Semantic Analyzer
	Takes this tree and apply MEANING to the tree.
		If it says print, then somewhere else, print must be defined.
			Thus, the SA attaches the definition to print.


 Semantic Analyzer
 Gets the meaning of your code vs the structure (syntax) of the code; proves meaning to the code
 Links functions when possible; this is where the undefined function  and case mismatch (eg. int x = 5.7)error is caught
 Create a symbol table - a hash table/list of the identifiers and variables and thier values in your code
 will also generate a list of operations to be performed sequentially
 Takes symbol table, the syntax tree, and operations list and sends it to the optimizer
 Not all compilers have optimizers, and its not always in use.
 Optimizer takes shortcuts and makes the code better
 Code generators change code to assembly and to binary, or straight to binary
 These parts are simpler than the lexer, parser, and semantic analyzer. You need to pay most attention these when writing your own language.
MDL files
 The "compiler" with go through the file and generate into images.
 We need to make tokens, syntax trees, etc with our language
 ID [a-zA-Z][\.a-zA-Z0-9_]*
 identify the characters we can use as identifiers (This identifies anything that starts with a letter andd contains numbers and letters)
 example tokens : push, pop, save, torus, etc.
 we can also use it to define strings and points
 Next thing we need is the syntax
 struct command op[MAX_COMMANDS] is the result of semantic analyzer, op[0] will be first, etc
 SYMTAB *s is our symbol table
 %token <CASES> are the grammar rules
 after these are using command with the cases used.
 if it doesn't follow these, the "compiler" will throw a syntax error


 4/30~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 token list--flex--> lexer
 grammer--bison--> parser and semantic analyzer
 		  yacc

 when you see a command, do whatever the comamnd is to the top of the stack.

 Look at the main file and put whatever application in there. Get the basic functionality of MDL.

 http://www.stuycs.org/courses/ml6/dw/work/mdlmoredelightfullabor